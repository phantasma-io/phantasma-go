package cryptography

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNewAddress(t *testing.T) {
	address := NewAddress([]byte{0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32, 0x33})
	assert.Equal(t, address.String(), "P2KM9FjYrDXnPPAynLXAHdQ8wYz8de9VbDeybrLepnw6C5x")
}

func TestAddressFromString(t *testing.T) {
	address, err := FromString("P2KM9FjYrDXnPPAynLXAHdQ8wYz8de9VbDeybrLepnw6C5x")
	assert.Nil(t, err)
	assert.True(t, address.IsUser())
	assert.Equal(t, address.String(), "P2KM9FjYrDXnPPAynLXAHdQ8wYz8de9VbDeybrLepnw6C5x")
	assert.Equal(t, address.Bytes(), []byte{0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32, 0x33})
}

func TestAddressKind(t *testing.T) {
	user := NewAddress([]byte{0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32, 0x33})
	system := NewAddress([]byte{0x02, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32, 0x33})
	interop := NewAddress([]byte{0x03, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31, 0x32, 0x33})
	assert.Equal(t, user.Kind(), User)
	assert.Equal(t, system.Kind(), System)
	assert.Equal(t, interop.Kind(), Interop)
}
